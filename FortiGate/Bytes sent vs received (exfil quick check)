make_col path:lower(string(EXTRA.path))
filter contains(string(path), "firewall")

make_table
pick_col
  Date:string(FIELDS.date),
  Time:string(FIELDS.time),
  SourceIP:string(FIELDS.srcip),
  DestinationIP:string(FIELDS.dstip),
  SentBytes:int64(coalesce(FIELDS.sentbyte, 0)),
  RcvdBytes:int64(coalesce(FIELDS.rcvdbyte, 0)),
  Service:string(FIELDS.service),
  Action:string(FIELDS.action)

// Filter for specific date (update as needed)
//filter Date = "2025-09-17"

// --- Geo lookup table (collapsed IPv4 ranges) ---
@city_ipv4_v2_sq <- @city_ipv4{
  statsby
    network_start:any_not_null(network_start),
    network_end:any_not_null(network_end),
    country_name:last_not_null(country_name),
    city_name:last_not_null(city_name),
    subdivision_1_name:last_not_null(subdivision_1_name),
    group_by(network)
  add_key network_start, network_end
}

// --- Source IP → Geo ---
@src_geo <- @{
  make_col src_net:parse_ip(SourceIP)
  filter int64(src_net.family) = 4
  make_col ipv4_int:int64(src_net.ip_fields[0])
  join
    on(ipv4_int >= @city_ipv4_v2_sq.network_start and ipv4_int <= @city_ipv4_v2_sq.network_end),
    src_country:@city_ipv4_v2_sq.country_name,
    src_city:@city_ipv4_v2_sq.city_name,
    src_state:@city_ipv4_v2_sq.subdivision_1_name
  statsby
    SrcCountry:any_not_null(src_country),
    SrcCity:any_not_null(src_city),
    SrcState:any_not_null(src_state),
    group_by(SourceIP)
}

// --- Destination IP → Geo ---
@dst_geo <- @{
  make_col dst_net:parse_ip(DestinationIP)
  filter int64(dst_net.family) = 4
  make_col ipv4_int:int64(dst_net.ip_fields[0])
  join
    on(ipv4_int >= @city_ipv4_v2_sq.network_start and ipv4_int <= @city_ipv4_v2_sq.network_end),
    dst_country:@city_ipv4_v2_sq.country_name,
    dst_city:@city_ipv4_v2_sq.city_name,
    dst_state:@city_ipv4_v2_sq.subdivision_1_name
  statsby
    DstCountry:any_not_null(dst_country),
    DstCity:any_not_null(dst_city),
    DstState:any_not_null(dst_state),
    group_by(DestinationIP)
}

// Attach geo to rows
leftjoin
  on(SourceIP=@src_geo.SourceIP),
  SrcCountry:@src_geo.SrcCountry,
  SrcCity:@src_geo.SrcCity,
  SrcState:@src_geo.SrcState

leftjoin
  on(DestinationIP=@dst_geo.DestinationIP),
  DstCountry:@dst_geo.DstCountry,
  DstCity:@dst_geo.DstCity,
  DstState:@dst_geo.DstState

// Calculate exfiltration metrics
aggregate group_by(SourceIP, DestinationIP, SrcCountry, DstCountry, Service),
  TotalSent:sum(SentBytes),
  TotalReceived:sum(RcvdBytes),
  NetTransfer:(sum(SentBytes) - sum(RcvdBytes)),
  ExfilRatio:if(sum(RcvdBytes) > 0, sum(SentBytes) / sum(RcvdBytes), 999),
  Sessions:count(),
  FirstTime:min(Time),
  LastTime:max(Time)

// Focus on potential exfiltration patterns
filter TotalSent > 1000000  // > 1MB sent
  and ExfilRatio > 5        // Sent 5x more than received
  and (is_null(DstCountry) or DstCountry != "United States")

sort desc(TotalSent)
