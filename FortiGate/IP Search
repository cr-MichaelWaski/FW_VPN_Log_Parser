make_col path:lower(string(EXTRA.path))
filter contains(string(path), "converted")

make_table
pick_col
// =========================
// TIER 1 — CORE EVENT CONTEXT
// =========================
//Timestamp:string(FIELDS.timestamp),
//Timestamp:string(replace(replace(FIELDS.timestamp, "T", " "), "Z", "")),
Date:string(FIELDS.date),
Time:string(FIELDS.time),
DateTime:string(FIELDS.date) + " " + string(FIELDS.time),
Action:string(FIELDS.action),
LogType:string(FIELDS.type),
SubType:string(FIELDS.subtype),
LogDescription:string(FIELDS.logdesc),
VPNUser:string(FIELDS.user),
RemoteIP:string(FIELDS.remip),
SourceIP:string(FIELDS.srcip),
DestinationIP:string(FIELDS.dstip),
DestinationHost:string(FIELDS.dst_host),
Service:string(FIELDS.service),
Protocol:string(FIELDS.proto),
Outcome:string(FIELDS.reason),
Message:string(FIELDS.message),

    // =========================
    // TIER 2 — VPN & TRAFFIC CONTEXT
    // =========================
    VPNGroup:string(FIELDS.group),
    TunnelID:string(FIELDS.tunnelid),
    TunnelType:string(FIELDS.tunneltype),
    VPNMsg:string(FIELDS.msg),
    SourcePort:string(FIELDS.srcport),
    DestinationPort:string(FIELDS.dstport),
    SourceInterface:string(FIELDS.srcintf),
    SourceInterfaceRole:string(FIELDS.srcintfrole),
    DestinationInterface:string(FIELDS.dstintf),
    DestinationInterfaceRole:string(FIELDS.dstintfrole),
    SourceCountry:string(FIELDS.srccountry),
    DestinationCountry:string(FIELDS.dstcountry),
    DestinationMAC:string(FIELDS.dstmac),

    // =========================
    // TIER 3 — POLICY, SESSION, TRANSLATION
    // =========================
    PolicyID:string(FIELDS.policyid),
    PolicyName:string(FIELDS.policyname),
    PolicyType:string(FIELDS.policytype),
    PolicyUUID:string(FIELDS.poluuid),
    SessionID:string(FIELDS.sessionid),
    TranslatedIP:string(FIELDS.tranip),
    TranslatedPort:string(FIELDS.tranport),
    TranslationDisposition:string(FIELDS.trandisp),
    ReceivedBytes:int64(FIELDS.rcvdbyte),
    SentBytes:int64(FIELDS.sentbyte),
    ReceivedPackets:int64(FIELDS.rcvdpkt),
    SentPackets:int64(FIELDS.sentpkt),

    // =========================
    // TIER 4 — SYSTEM & GRAYLOG METADATA
    // =========================
    DeviceName:string(FIELDS.devname),
    DeviceID:string(FIELDS.devid),
    SourceDevice:string(FIELDS.dstdevtype),
    LogID:string(FIELDS.logid),
    LogLevel:string(FIELDS.level),
    EventTime:string(FIELDS.eventtime),
    Timezone:string(FIELDS.tz),
    VirtualDomain:string(FIELDS.vd),
    Facility:string(FIELDS.facility),
    FacilityNum:string(FIELDS.facility_num),

    // Graylog-specific ingestion metadata
    GL2MessageID:string(FIELDS.gl2_message_id),
    GL2AccountedMessageSize:int64(FIELDS.gl2_accounted_message_size),
    GL2ProcessingTimestamp:string(FIELDS.gl2_processing_timestamp),
    GL2ReceiveTimestamp:string(FIELDS.gl2_receive_timestamp),
    GL2ProcessingDuration:int64(FIELDS.gl2_processing_duration_ms),
    GL2RemoteIP:string(FIELDS.gl2_remote_ip),
    GL2RemotePort:string(FIELDS.gl2_remote_port),
    GL2SourceInput:string(FIELDS.gl2_source_input),
    GL2SourceNode:string(FIELDS.gl2_source_node),
    RAW:FIELDS

dedup

// Target IP identification using extracted columns (your corrected version)
make_col target_ip_found: case(
string(SourceIP) = "91.92.241.179" or string(SourceIP) = "64.190.113.235" or
string(SourceIP) = "216.219.95.234" or string(SourceIP) = "157.250.195.229" or
string(SourceIP) = "64.94.84.85" or string(SourceIP) = "96.62.214.11" or
string(SourceIP) = "49.12.69.80", "SOURCE_MATCH",
string(DestinationIP) = "91.92.241.179" or string(DestinationIP) = "64.190.113.235" or
string(DestinationIP) = "216.219.95.234" or string(DestinationIP) = "157.250.195.229" or
string(DestinationIP) = "64.94.84.85" or string(DestinationIP) = "96.62.214.11" or
string(DestinationIP) = "49.12.69.80", "DEST_MATCH",
string(RemoteIP) = "91.92.241.179" or string(RemoteIP) = "64.190.113.235" or
string(RemoteIP) = "216.219.95.234" or string(RemoteIP) = "157.250.195.229" or
string(RemoteIP) = "64.94.84.85" or string(RemoteIP) = "96.62.214.11" or
string(RemoteIP) = "49.12.69.80", "REMOTE_MATCH",
true, "NO_MATCH"
)

// Get the actual target IP value
make_col target_ip: case(
target_ip_found = "SOURCE_MATCH", SourceIP,
target_ip_found = "DEST_MATCH", DestinationIP,
target_ip_found = "REMOTE_MATCH", RemoteIP,
true, "NO_MATCH"
)

// Filter to only show target IPs
filter target_ip_found != "NO_MATCH"

// Map to timeline headers format
make_col EventTimeUTC: DateTime
make_col Hostname: case(
not is_null(DeviceName) and DeviceName != "" and DeviceName != "null", DeviceName,
not is_null(GL2SourceNode) and GL2SourceNode != "" and GL2SourceNode != "null", GL2SourceNode,
not is_null(DeviceID) and DeviceID != "" and DeviceID != "null", "Device-" + DeviceID,
not is_null(GL2SourceInput) and GL2SourceInput != "" and GL2SourceInput != "null", GL2SourceInput,
not is_null(VirtualDomain) and VirtualDomain != "" and VirtualDomain != "null", "VDom-" + VirtualDomain,
true, "FortiGate-Firewall"
)
make_col Username: case(
not is_null(VPNUser) and VPNUser != "", VPNUser,
true, ""
)
make_col EventType: case(
LogType = "traffic", "Network Traffic",
LogType = "event" and SubType = "vpn", "VPN Event",
LogType = "event" and SubType = "system", "System Event",
LogType = "utm", "Security Event",
not is_null(Action) and Action != "", "Firewall " + Action,
true, "Firewall Log"
)
make_col EventDetails: case(
not is_null(Message) and Message != "", Message,
not is_null(LogDescription) and LogDescription != "", LogDescription,
not is_null(Service) and Service != "", "Service: " + Service + " Protocol: " + Protocol,
true, "Target IP activity detected"
)
make_col EventNotes: case(
target_ip_found = "SOURCE_MATCH", "Target IP as source - " + Action + " - " + Service,
target_ip_found = "DEST_MATCH", "Target IP as destination - " + Action + " - " + Service,
target_ip_found = "REMOTE_MATCH", "Target IP as remote (VPN) - " + Action,
true, "Target IP detected"
)
make_col SourceIPField: SourceIP
make_col DestinationIPField: DestinationIP
make_col HashValue: case(
not is_null(SessionID) and SessionID != "", SessionID,
not is_null(LogID) and LogID != "", LogID,
true, ""
)
make_col UserSID: case(
not is_null(PolicyID) and PolicyID != "", PolicyID,
true, ""
)
make_col URL: case(
not is_null(DestinationHost) and DestinationHost != "", DestinationHost,
true, ""
)

// Sort by timestamp
sort EventTimeUTC

// Select only the timeline columns
pick_col EventTimeUTC, Hostname, Username, EventType, EventDetails, EventNotes, SourceIPField, DestinationIPField, HashValue, UserSID, URL
