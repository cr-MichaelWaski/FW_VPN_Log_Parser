make_col path:lower(string(EXTRA.path))
filter contains(string(path), "firewall")

make_table
pick_col
  SourceIP:string(FIELDS.srcip),
  DestinationIP:string(FIELDS.dstip),
  SentBytes:int64(coalesce(FIELDS.sentbyte, 0)),
  RcvdBytes:int64(coalesce(FIELDS.rcvdbyte, 0))

filter not is_null(SourceIP) and not is_null(DestinationIP)

// --- Geo lookup table (IPv4 ranges collapsed for fast joins) ---
@city_ipv4_v2_sq <- @city_ipv4{
  statsby
    network_start:any_not_null(network_start),
    network_end:any_not_null(network_end),
    country_name:last_not_null(country_name),
    city_name:last_not_null(city_name),
    subdivision_1_name:last_not_null(subdivision_1_name),
    group_by(network)
  add_key network_start, network_end
}

// --- ASN lookup table (collapsed) ---
@asn_ipv4_v2_sq <- @asn_ipv4{
  statsby
    network_start:any_not_null(network_start),
    network_end:any_not_null(network_end),
    autonomous_system_organization:last_not_null(autonomous_system_organization),
    group_by(network)
  add_key network_start, network_end
}

// --- Source IP → Geo + ASN ---
@src_geo <- @{
  make_col src_net:parse_ip(SourceIP)
  filter int64(src_net.family) = 4
  make_col ipv4_int:int64(src_net.ip_fields[0])

  // Geo
  join
    on(ipv4_int >= @city_ipv4_v2_sq.network_start and ipv4_int <= @city_ipv4_v2_sq.network_end),
    src_country:@city_ipv4_v2_sq.country_name,
    src_city:@city_ipv4_v2_sq.city_name,
    src_state:@city_ipv4_v2_sq.subdivision_1_name

  // ASN
  join
    on(ipv4_int >= @asn_ipv4_v2_sq.network_start and ipv4_int <= @asn_ipv4_v2_sq.network_end),
    src_asn:@asn_ipv4_v2_sq.autonomous_system_organization

  statsby
    SrcCountry:any_not_null(src_country),
    SrcCity:any_not_null(src_city),
    SrcState:any_not_null(src_state),
    SrcASN:any_not_null(src_asn),
    group_by(SourceIP)
}

// --- Destination IP → Geo + ASN ---
@dst_geo <- @{
  make_col dst_net:parse_ip(DestinationIP)
  filter int64(dst_net.family) = 4
  make_col ipv4_int:int64(dst_net.ip_fields[0])

  // Geo
  join
    on(ipv4_int >= @city_ipv4_v2_sq.network_start and ipv4_int <= @city_ipv4_v2_sq.network_end),
    dst_country:@city_ipv4_v2_sq.country_name,
    dst_city:@city_ipv4_v2_sq.city_name,
    dst_state:@city_ipv4_v2_sq.subdivision_1_name

  // ASN
  join
    on(ipv4_int >= @asn_ipv4_v2_sq.network_start and ipv4_int <= @asn_ipv4_v2_sq.network_end),
    dst_asn:@asn_ipv4_v2_sq.autonomous_system_organization

  statsby
    DstCountry:any_not_null(dst_country),
    DstCity:any_not_null(dst_city),
    DstState:any_not_null(dst_state),
    DstASN:any_not_null(dst_asn),
    group_by(DestinationIP)
}

// Attach geo+asn to the flow records
leftjoin
  on(SourceIP=@src_geo.SourceIP),
  SrcCountry:@src_geo.SrcCountry,
  SrcCity:@src_geo.SrcCity,
  SrcState:@src_geo.SrcState,
  SrcASN:@src_geo.SrcASN

leftjoin
  on(DestinationIP=@dst_geo.DestinationIP),
  DstCountry:@dst_geo.DstCountry,
  DstCity:@dst_geo.DstCity,
  DstState:@dst_geo.DstState,
  DstASN:@dst_geo.DstASN

// Exclude known cloud traffic (do this before aggregating for speed)
filter is_null(DstASN) or (
  DstASN != "BLUEARCHIVE-ZONE-1" and
  DstASN != "MICROSOFT-CORP-MSN-AS-BLOCK" and
  DstASN != "AMAZON-02" and
  DstASN != "GOOGLE-CLOUD-PLATFORM"
)

// ---- Separate Sent / Received totals (in GB) ----
// aggregate group_by(
//     SourceIP, DestinationIP,
//     SrcCountry, SrcCity, SrcState, SrcASN,
//     DstCountry, DstCity, DstState, DstASN
//   ),
//   TotalSentGB:sum(SentBytes) / (1024 * 1024 * 1024),
//   TotalRcvdGB:sum(RcvdBytes) / (1024 * 1024 * 1024),
//   TotalGB:(sum(SentBytes) + sum(RcvdBytes)) / (1024 * 1024 * 1024),
//   Events:count()
aggregate group_by(
    SourceIP, DestinationIP,
    SrcCountry, SrcCity, SrcState, SrcASN,
    DstCountry, DstCity, DstState, DstASN
  ),
  TotalSentBytes:sum(SentBytes),
  TotalRcvdBytes:sum(RcvdBytes),
  TotalBytes:(sum(SentBytes) + sum(RcvdBytes)),
  Events:count()

//limit 100

//filter is_null(DstCountry) or (DstCountry != "United States")
sort desc(TotalBytes)
filter DstASN = "M247 Europe SRL"
