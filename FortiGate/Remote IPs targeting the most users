make_col path:lower(string(EXTRA.path))
filter contains(string(path), "firewall")

make_table
pick_col
  Date:string(FIELDS.date),
  Time:string(FIELDS.time),
  RemoteIP:string(FIELDS.remip),
  SourceIP:string(FIELDS.srcip),
  DestinationIP:string(FIELDS.dstip),
  Service:string(FIELDS.service),
  Action:string(FIELDS.action),
  DestinationPort:string(FIELDS.dstport)

// Use SourceIP as proxy for "users" since user field may not exist
filter not is_null(RemoteIP) and RemoteIP != "" and not is_null(SourceIP)

// --- Geo lookup table (collapsed for performance) ---
@city_ipv4_v2_sq <- @city_ipv4{
  statsby
    network_start:any_not_null(network_start),
    network_end:any_not_null(network_end),
    country_name:last_not_null(country_name),
    city_name:last_not_null(city_name),
    is_anonymous_proxy:last_not_null(is_anonymous_proxy),
    subdivision_1_name:last_not_null(subdivision_1_name),
    group_by(network)
  add_key network_start, network_end
}

// --- ASN lookup table ---
@asn_ipv4_v2_sq <- @asn_ipv4{
  statsby
    network_start:any_not_null(network_start),
    network_end:any_not_null(network_end),
    autonomous_system_organization:last_not_null(autonomous_system_organization),
    group_by(network)
  add_key network_start, network_end
}

// --- RemoteIP â†’ Geo + ASN ---
@remote_geo <- @{
  make_col ip_obj:parse_ip(RemoteIP)
  filter int64(ip_obj.family) = 4
  make_col ipv4_int:int64(ip_obj.ip_fields[0])
  
  // Geo lookup
  join
    on(ipv4_int >= @city_ipv4_v2_sq.network_start and ipv4_int <= @city_ipv4_v2_sq.network_end),
    country:@city_ipv4_v2_sq.country_name,
    city:@city_ipv4_v2_sq.city_name,
    state:@city_ipv4_v2_sq.subdivision_1_name,
    is_proxy:@city_ipv4_v2_sq.is_anonymous_proxy
  
  // ASN lookup
  join
    on(ipv4_int >= @asn_ipv4_v2_sq.network_start and ipv4_int <= @asn_ipv4_v2_sq.network_end),
    asn:@asn_ipv4_v2_sq.autonomous_system_organization
  
  statsby
    Country:any_not_null(country),
    City:any_not_null(city),
    State:any_not_null(state),
    ASN:any_not_null(asn),
    IsProxy:any_not_null(is_proxy),
    group_by(RemoteIP)
}

// Attach geo data
leftjoin
  on(RemoteIP=@remote_geo.RemoteIP),
  Country:@remote_geo.Country,
  City:@remote_geo.City,
  State:@remote_geo.State,
  ASN:@remote_geo.ASN,
  IsProxy:@remote_geo.IsProxy

// Aggregate targeting data with enhanced metrics
aggregate group_by(RemoteIP, Country, City, State, ASN, IsProxy),
  TargetedSourceIPs:count_distinct(SourceIP),
  UniqueDestinations:count_distinct(DestinationIP),
  UniqueServices:count_distinct(Service),
  UniquePorts:count_distinct(DestinationPort),
  Events:count(),
  AllowEvents:sum(if(Action = "accept", 1, 0)),
  DenyEvents:sum(if(Action = "deny" or Action = "close", 1, 0)),
  FirstSeen:min(Date + " " + Time),
  LastSeen:max(Date + " " + Time)

// Calculate threat indicators
make_col ThreatScore:case(
  TargetedSourceIPs > 20 and UniqueServices > 5, "HIGH_MULTI_TARGET",
  TargetedSourceIPs > 10 and UniqueDestinations > 5, "MODERATE_MULTI_TARGET",
  TargetedSourceIPs > 5, "POTENTIAL_MULTI_TARGET",
  IsProxy = true and TargetedSourceIPs > 3, "PROXY_MULTI_TARGET",
  true, "SINGLE_TARGET"
)

make_col AttackPattern:case(
  DenyEvents > AllowEvents and TargetedSourceIPs > 10, "WIDESPREAD_BLOCKED",
  UniqueServices = 1 and TargetedSourceIPs > 10, "SERVICE_FOCUSED",
  UniquePorts > 10 and TargetedSourceIPs > 5, "PORT_SCANNING",
  true, "MIXED_ACTIVITY"
)

// Filter out known legitimate services
filter is_null(ASN) or (
  ASN != "Global Connectivity Solutions Llp" and
  ASN != "MICROSOFT-CORP-MSN-AS-BLOCK" and
  ASN != "AMAZON-02" and
  ASN != "GOOGLE-CLOUD-PLATFORM"
)

sort desc(TargetedSourceIPs), desc(Events)
limit 100

// Uncomment for specific analysis:
// filter ThreatScore != "SINGLE_TARGET"
// filter IsProxy = true
// filter TargetedSourceIPs > 10
