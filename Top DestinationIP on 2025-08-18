make_col path:lower(string(EXTRA.path))
filter contains(string(path), "firewall")

make_table
pick_col
  EventTime:parse_isotime(string(FIELDS.timestamp)),
  DestinationIP:string(FIELDS.dstip)

filter EventTime >= parse_isotime("2025-08-18T00:00:00Z")
  and EventTime <  parse_isotime("2025-08-19T00:00:00Z")
  and not is_null(DestinationIP)

// --- Geo lookup table ---
@city_ipv4_v2_sq <- @city_ipv4{
  statsby
    network_start:any_not_null(network_start),
    network_end:any_not_null(network_end),
    country_name:last_not_null(country_name),
    city_name:last_not_null(city_name),
    subdivision_1_name:last_not_null(subdivision_1_name),
    group_by(network)
  add_key network_start, network_end
}

// --- DestinationIP â†’ Geo ---
@dst_geo <- @{
  make_col dst_net:parse_ip(DestinationIP)
  filter int64(dst_net.family) = 4
  make_col ipv4_int:int64(dst_net.ip_fields[0])
  join
    on(ipv4_int >= @city_ipv4_v2_sq.network_start 
    and ipv4_int <= @city_ipv4_v2_sq.network_end),
    DstCountry:@city_ipv4_v2_sq.country_name,
    DstCity:@city_ipv4_v2_sq.city_name,
    DstState:@city_ipv4_v2_sq.subdivision_1_name
  statsby
    DstCountry:any_not_null(DstCountry),
    DstCity:any_not_null(DstCity),
    DstState:any_not_null(DstState),
    group_by(DestinationIP)
}

// --- Join + Aggregate ---
leftjoin
  on(DestinationIP=@dst_geo.DestinationIP),
  DstCountry:@dst_geo.DstCountry,
  DstCity:@dst_geo.DstCity,
  DstState:@dst_geo.DstState

aggregate group_by(DestinationIP, DstCity, DstState, DstCountry),
  Events:count()

sort desc(Events)
limit 200

filter DstCountry != "United States"
