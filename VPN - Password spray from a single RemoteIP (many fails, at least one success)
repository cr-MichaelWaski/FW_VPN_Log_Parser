make_col path:lower(string(EXTRA.path))
filter contains(string(path), "firewall")

// ───────── Base Table ─────────
make_table
pick_col
  EventTime:parse_isotime(string(FIELDS.timestamp)),
  SubType:string(FIELDS.subtype),
  Action:string(FIELDS.action),
  User:string(FIELDS.user),
  RemoteIP:string(FIELDS.remip),
  Reason:string(FIELDS.reason)

filter SubType = "vpn" and not is_null(EventTime)

make_col action_l:lower(string(Action)), reason_l:lower(string(Reason))
make_col IsSuccess:(action_l = "tunnel-up" or action_l = "login" or contains(reason_l, "success"))
make_col IsFail:(not IsSuccess)

// ───────── Geo + ASN Lookup Tables ─────────

// MaxMind Geo DB
@city_ipv4_v2_sq <- @city_ipv4{
  statsby
    network_start:any_not_null(network_start),
    network_end:any_not_null(network_end),
    country_name:last_not_null(country_name),
    city_name:last_not_null(city_name),
    subdivision_1_name:last_not_null(subdivision_1_name),
    group_by(network)
  add_key network_start, network_end
}

// ASN DB
@asn_ipv4_v2_sq <- @asn_ipv4{
  statsby
    network_start:any_not_null(network_start),
    network_end:any_not_null(network_end),
    autonomous_system_organization:last_not_null(autonomous_system_organization),
    group_by(network)
  add_key network_start, network_end
}

// Map RemoteIP → Geo + ASN
@remote_geo <- @{
  filter not is_null(RemoteIP)
  make_col ip:parse_ip(RemoteIP)
  filter int64(ip.family) = 4
  make_col ipv4:int64(ip.ip_fields[0])

  join
    on(ipv4 >= @city_ipv4_v2_sq.network_start and ipv4 <= @city_ipv4_v2_sq.network_end),
    Country:@city_ipv4_v2_sq.country_name,
    City:@city_ipv4_v2_sq.city_name,
    State:@city_ipv4_v2_sq.subdivision_1_name

  join
    on(ipv4 >= @asn_ipv4_v2_sq.network_start and ipv4 <= @asn_ipv4_v2_sq.network_end),
    ASN:@asn_ipv4_v2_sq.autonomous_system_organization

  statsby
    Country:any_not_null(Country),
    City:any_not_null(City),
    State:any_not_null(State),
    ASN:any_not_null(ASN),
    group_by(RemoteIP)
}

// ───────── Attach Geo Data ─────────
leftjoin
  on(RemoteIP=@remote_geo.RemoteIP),
  Country:@remote_geo.Country,
  City:@remote_geo.City,
  State:@remote_geo.State,
  ASN:@remote_geo.ASN

// ───────── Phase 1: Per User Per Hour ─────────
aggregate group_by(RemoteIP, Bucket:format_time(EventTime, 'YYYY-MM-DD HH24'), User, Country, City, ASN),
  UserHadSuccess:max(if(IsSuccess, 1, 0)),
  UserFails:sum(if(IsFail, 1, 0))

// ───────── Phase 2: Roll Up to RemoteIP + Hour ─────────
aggregate group_by(RemoteIP, Bucket, Country, City, ASN),
  Fails:sum(UserFails),
  SuccessUsers:count_distinct(if(UserHadSuccess = 1, User, "")),
  SuccessUserList:array_agg_distinct(if(UserHadSuccess = 1, User, ""))

// ───────── Detection ─────────
filter (Fails >= 20 and SuccessUsers >= 1)

// ───────── Output ─────────
sort desc(Fails), desc(SuccessUsers), asc(RemoteIP), asc(Bucket)


//filter is_null(Country) or (Country != "United States" and Country != "India")
